{"version":3,"file":"static/js/451.8e063151.chunk.js","mappings":"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","sources":["Redux/contacts/selectors.js","Forms/CreateContact/CreateContact.jsx","Redux/filter/selectors.js","Forms/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Phonebook/Phonebook.jsx"],"sourcesContent":["export const selectorContacts = state => state.contacts.items;\n","import { Notify } from 'notiflix';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectorContacts } from 'Redux/contacts/selectors';\nimport { addNewContact } from 'Redux/contacts/thunks';\n\nexport const CreateContact = () => {\n  const [name, setName] = useState('');\n  const [phone, setNumber] = useState('');\n  const contacts = useSelector(selectorContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    if (name === 'number') {\n      setNumber(value);\n    } else {\n      setName(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isAlreadyExist = contacts.find(\n      el => el.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isAlreadyExist) return Notify.failure(`${name} is already in contacts`);\n    dispatch(addNewContact({ name, phone }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className=\"mb-3\" onSubmit={handleSubmit}>\n      <div className=\"mb-3 ms-3 me-3 mt-3\">\n        <label htmlFor=\"nameInput\" className=\"form-label\">\n          Contact Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          className=\"form-control\"\n          id=\"nameInput\"\n          value={name}\n        />\n      </div>\n      <div className=\"mb-3 ms-3 me-3\">\n        <label htmlFor=\"exampleInputTodoDescription\" className=\"form-label\">\n          Contact Number\n        </label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          className=\"form-control\"\n          id=\"exampleInputTodoDescription\"\n          value={phone}\n        />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary ms-3\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectorContacts } from 'Redux/contacts/selectors';\n\nexport const selectorFilter = state => state.filter.filter;\n\nexport const selectorFilteredContacts = createSelector(\n  selectorContacts,\n  selectorFilter,\n  (contacts, filter) =>\n    contacts\n      ? contacts.filter(contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase())\n        )\n      : contacts\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectorFilter } from 'Redux/filter/selectors';\nimport { setFilter } from 'Redux/filter/slice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectorFilter);\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div className=\"mb-3 ms-3 me-3\">\n      <label htmlFor=\"filterContact\" className=\"form-label\">\n        Find contacts by name\n      </label>\n      <input\n        name=\"title\"\n        type=\"text\"\n        onChange={handleChangeFilter}\n        className=\"form-control\"\n        id=\"filterContact\"\n        value={filter}\n      />\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { removeContact } from 'Redux/contacts/thunks';\nimport { selectorFilteredContacts } from 'Redux/filter/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectorFilteredContacts);\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <>\n      <ul className=\"list-group\">\n        {filteredContacts.map(el => (\n          <li className=\"list-group-item ms-3 me-3\" key={el.id}>\n            {el.name}: {el.phone}\n            <button\n              type=\"button\"\n              className=\"btn-close ms-5\"\n              aria-label=\"Close\"\n              onClick={() => handleDelete(el.id)}\n            ></button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getAllContacts } from 'Redux/contacts/thunks';\nimport { CreateContact } from 'Forms/CreateContact/CreateContact';\nimport { Filter } from 'Forms/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <CreateContact />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Phonebook;\n"],"names":["selectorContacts","state","contacts","items","CreateContact","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setNumber","useSelector","dispatch","useDispatch","handleChange","_ref","_ref$target","target","value","_jsxs","className","onSubmit","e","preventDefault","find","el","toLowerCase","Notify","concat","addNewContact","children","_jsx","htmlFor","type","pattern","title","required","onChange","id","selectorFilter","filter","selectorFilteredContacts","createSelector","contact","includes","Filter","setFilter","ContactList","filteredContacts","_Fragment","map","onClick","removeContact","useEffect","getAllContacts"],"sourceRoot":""}